// Code generated by MockGen. DO NOT EDIT.
// Source: providers.go
//
// Generated by this command:
//
//	mockgen -source=providers.go -package=mock -destination=./mock/providers.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	provider "github.com/ictsc/traefik-forward-auth/internal/provider"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ExchangeCode mocks base method.
func (m *MockProvider) ExchangeCode(redirectURI, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCode", redirectURI, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCode indicates an expected call of ExchangeCode.
func (mr *MockProviderMockRecorder) ExchangeCode(redirectURI, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCode", reflect.TypeOf((*MockProvider)(nil).ExchangeCode), redirectURI, code)
}

// GetLoginURL mocks base method.
func (m *MockProvider) GetLoginURL(redirectURI, state string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginURL", redirectURI, state)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLoginURL indicates an expected call of GetLoginURL.
func (mr *MockProviderMockRecorder) GetLoginURL(redirectURI, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginURL", reflect.TypeOf((*MockProvider)(nil).GetLoginURL), redirectURI, state)
}

// GetUser mocks base method.
func (m *MockProvider) GetUser(token string) (provider.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", token)
	ret0, _ := ret[0].(provider.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockProviderMockRecorder) GetUser(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockProvider)(nil).GetUser), token)
}

// Name mocks base method.
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// Setup mocks base method.
func (m *MockProvider) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProviderMockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProvider)(nil).Setup))
}
